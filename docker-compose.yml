services:
  frontend:
    build: ./front-end
    container_name: clms_frontend
    # ports:
    #   - "3000:3000"
    network_mode: "host"
    env_file:
      - ./front-end/.env.local
    volumes:
      - ./front-end:/app
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - backend
  
  backend:
    build: ./back-end
    container_name: clms_backend
    # ports:
    #   - "8000:8000"
    network_mode: "host"
    env_file:
      - ./back-end/.env
    volumes:
      - ./back-end:/home/app
    restart: unless-stopped
    depends_on:
      - database
      - redis

  database:
    image: postgres:15
    container_name: clms_postgres
    network_mode: "host"
    env_file:
      - .env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgresuser} -d ${POSTGRES_DB:-clms}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: clms_redis
    network_mode: "host"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3


volumes:
  postgres_data:
  redis_data: